function [wvWidth, wdStart, wdEnd, rpTime] = wv_width(wave,varargin)
%% Get waveform width
%
%  This function fits a spline to a waveform with time values
%  (specified by optional input argument "wvTimes" specified by
%  flag "-t") upsampled by optional input argument "upsamp" 
%  specified by flag "-u". Width, in this case, is defined to be
%  the time between the first local extrema and last local extrema
%  (with the exception of the start and end of the voltage trace)
%
%  Required input:
%      <wave>     --  Vector of voltage values for the wave to measure.
%
%  Optional inputs:
%      <wvTimes>  -- Specified by flag "-t". Vector of times corresponding
%                    to the voltage values in "wave". Default is
%                    1:length(wave).
%
%      <upsamp>   -- Specified by flag "-u". Times used in the spline
%                    interpolation use the time increment in
%                    wvTimes/upsamp. Default is 10. If wvTimes does not
%                    have a uniform difference, no upsampling will be done.

% Set defaults
% wvTimes = 1:length(wave);
wvTimes = ((1:length(wave))-9).*25; % 40 kHz sampling rate = 25 us resolution
upsamp = 10;
wdType = 'halfmax';

%  Decode varargin
if nargin > 1
    % Check that there are enough input arguments, if optional flags are
    % set
    if length(varargin{1}) ~= length(varargin), error('Not enough input arguments'); end
    for iv = 2:length(varargin{1})
        switch varargin{1}(iv)
            case 'u'
                upsamp      = varargin{iv};
            case 't'
                wvTimes     = varargin{iv};
        end
    end
end


%  Smooth data by fitting a spline to the upsample time values.
%  If the time increments are not linear, no upsampling will be
%  done.
if length(unique(diff(wvTimes))) ~= 1
    splTime = wvTimes;
else
    splTime = min(wvTimes):((unique(diff(wvTimes)))/upsamp):max(wvTimes);
end
splY = spline(wvTimes,wave,splTime);

% Find local extrema in interpolation
[maxVal, maxInd, minVal, minInd] = extrema(splY);
% Cut out start and end times
maxInd(ismember(maxInd,[1,length(splY)])) = [];
minInd(ismember(minInd,[1,length(splY)])) = [];

% If the clipping of the start and end removes all max/min, add it back as
% the last timepoint.
if isempty(maxInd), maxInd = length(splY); end
if isempty(minInd), minInd = length(splY); end

% Get times corresponding to the remaining indices
switch lower(wdType)
    case 'peaks'
        tMax = splTime(maxInd); tMin = splTime(minInd);
        wdEnd = max([tMax,tMin]); wdStart = min([tMax,tMin]);
        wvWidth = wdEnd-wdStart;
    case 'halfmax'
        baseline = wave(1);
        threshInd = find(splTime == min(abs(splTime)));
        allInds = [maxInd,minInd];
        amp = splY(allInds(abs(allInds-threshInd) == min(abs(allInds-threshInd))));
        halfmax = mean([amp,baseline]);
        wdEnd = splTime(find(abs(splY((threshInd+1):end)) < abs(baseline)+abs(halfmax),1)+threshInd);
        wdStart = splTime(find(abs(splY(1:threshInd)) < abs(baseline)+abs(halfmax),1,'last'));
        wvWidth = wdEnd-wdStart;
        
        keyboard
end

% Get the "time for repolarization" as per Ardid et al 2015 (75% peak)
%
% Implemented as finding the first time after wdEnd where 75% of the value
% at wdEnd is reached. If no points meet this criterion (i.e., the waveform
% is cut short or MUA causes this to be messy, return the time from the end
% of the wave (wdEnd) to the end of the stored waveform (wave/splY) and
% make it negative

rpInd = find(splTime > wdEnd & abs(splY) < (abs(splY(splTime == wdEnd))*.75),1);
if isempty(rpInd),
    rpTime = -(splTime(end) - wdEnd);
else
    rpTime = splTime(rpInd)-wdEnd;
end
    
