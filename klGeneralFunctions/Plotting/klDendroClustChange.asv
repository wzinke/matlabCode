function klDendroClustChange(h,linkMat,idx)

% Start by identifying the unique clusters
uClusts = unique(idx(~isnan(idx)));

% Set up handy constants
n = length(idx);
colors = jet(length(uClusts));

% Loop through clusters to get an initial accounting of the idx indices
clustNums = cell(1,length(uClusts));
for ic = 1:length(uClusts),
    clustNums{ic} = find(idx==uClusts(ic));
end

% What we'll do is we'll set up a variable that tells us which cluster the
% stuff was in
hClust = nan(1,size(linkMat,1));

% Now, this may be time consuming but we'll have to loop through linkMat,
% at least until I think of a better solution...
for il = 1:size(linkMat,1),
    % Figure out which cluster these observations are in
    col1 = cellfun(@(x) any(ismember(x,linkMat(il,1))),clustNums)
    






for ic = 1:length(uClusts),
    % Get this cluster index of idx
    theseInds = find(idx==uClusts(ic));
    
    % Get the indices of linkMat corresponding to this cluster
    hClustInds = find(ismember(linkMat(:,1),theseInds) | ismember(linkMat(:,2),theseInds));
    
    set(h(hClustInds),'color',colors(ic,:));
    allHClusts = cat(2,allHClusts,hClustInds');
    allHInds   = cat(2,allHInds,theseInds');
    whichClust = cat(2,whichClust,ones(1,length(hClustInds)).*ic);
end
theseInds = find(isnan(idx));
hClustInds = find(ismember(linkMat(:,1),theseInds) | ismember(linkMat(:,2),theseInds));
set(h(hClustInds),'color','k');
allHClusts = cat(2,allHClusts,hClustInds');
allHInds   = cat(2,allHInds,theseInds');
whichClust = cat(2,whichClust,ones(1,length(hClustInds)).*ic+1);

keyboard