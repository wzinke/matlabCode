function [myType, tuneParams, latencies] = klGetMG(allSpikes,Task)

% Set defaults
visualize = 0;
vWind = [50,100];
mWind = [-50,0];
blWind = [-150, -50];
blDim = 2;
blOpts = [1,2];

% Decode varargin

% Get just mgTask
if ~any(ismember(Task.TaskType,'MG')),
    warning('No MG trials found...');
    return
else
    mgTrials = strcmp(Task.TaskType,'MG');
    spikes = allSpikes(mgTrials,:);
    
    tFields = fieldnames(Task);
    goodLen = size(Task.Correct,1);
    for iField = 1:length(tFields),
        if size(Task.(tFields{iField}),1) == goodLen,
            mgTask.(tFields{iField}) = Task.(tFields{iField})(mgTrials,:);
        else
            mgTask.(tFields{iField}) = Task.(tFields{iField});
        end
    end
end

% Make SDFs
[vSDF,vTimes] = klSpkRatev3(spikes,'-q',1);
[mSDF,mTimes] = klSpkRatev3(spikes-repmat(mgTask.SRT+mgTask.GoCue,1,size(spikes,2)),'-q',1);
blMean = nanmean(nanmean(vSDF(:,vTimes >= blWind(1) & vTimes <= blWind(2)),blOpts(~ismember(blOpts,blDim))),blDim);
blStd = nanstd(nanmean(vSDF(:,vTimes >= blWind(1) & vTimes <= blWind(2)),blOpts(~ismember(blOpts,blDim))),[],blDim);

% Get tuning curves
% Get mean SDF in visual and movement epochs for each location
uLocs = unique(mgTask.TargetLoc(~isnan(mgTask.TargetLoc)));
for il = 1:length(uLocs),
    vLocMean(il) = nanmean(nanmean(vSDF(mgTask.Correct==1 & mgTask.TargetLoc==uLocs(il),(vTimes >= vWind(1) & vTimes <= vWind(2))),1),2);
    mLocMean(il) = nanmean(nanmean(mSDF(mgTask.Correct==1 & mgTask.TargetLoc==uLocs(il),(mTimes >= mWind(1) & mTimes <= mWind(2))),1),2);
end
% Fit the means
vPar = klTuneGauss(uLocs,vLocMean,'-v',visualize);
mPar = klTuneGauss(uLocs,mLocMean,'-v',visualize);
vRF = vPar.mu;
mRF = mPar.mu;

tuneParams.vis = vPar;
tuneParams.mov = mPar;

% Get the RF
sortLocs = sort(uLocs);
if ~isnan(vRF),
    if vRF > 315, vLocs(1) = 0; else vLocs(1) = sortLocs(find(sortLocs >= mRF,1)); end
    vLocs(2) = sortLocs(find(sortLocs <= vRF,1,'last'));
else
    vLocs = uLocs(vLocMean==max(vLocMean));
end
if ~isnan(mRF),
    if mRF > 315, mLocs(1) = 0; else mLocs(1) = sortLocs(find(sortLocs >= mRF,1)); end
    mLocs(2) = sortLocs(find(sortLocs <= mRF,1,'last'));
else
    mLocs = uLocs(mLocMean==max(mLocMean));
end

% Get the RF subsets
for i = 1:length(tFields),
    if length(mgTask.(tFields{i})) == length(mgTask.Correct),
        vrfTask.(tFields{i}) = mgTask.(tFields{i})(ismember(mgTask.TargetLoc,vLocs) & mgTask.Correct==1);
        mrfTask.(tFields{i}) = mgTask.(tFields{i})(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1);
    end
end
% Get neuron "type" (vis, mov, vismov, none)
visType = klGetTypeAlt(spikes(ismember(mgTask.TargetLoc,vLocs) & mgTask.Correct==1,:),vrfTask);
movType = klGetTypeAlt(spikes(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1,:),mrfTask);

isVis = any(strfind(visType{1},'vis'));
isMov = any(strfind(movType{1},'mov'));
if isVis && isMov,
    myType = 'vismov';
elseif isVis && ~isMov,
    myType = 'vis';
elseif ~isVis && isMov,
    myType = 'mov';
else
    myType = 'none';
end

% Get latencies
[vPoiss, poissVisMat] = klPoissLatv2d(spikes(ismember(mgTask.TargetLoc,vLocs) & mgTask.Correct==1,:),'-rwd',mgTask.Reward(ismember(mgTask.TargetLoc,vLocs) & mgTask.Correct==1),'-stim',mgTask.StimOnset(ismember(mgTask.TargetLoc,vLocs) & mgTask.Correct==1));
[mPoiss, poissMovMat] = klPoissLatv2d(spikes(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1,:)-repmat(mgTask.SRT(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1),1,size(spikes,2)),'-rwd',mgTask.Reward(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1)-mgTask.SRT(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1),'-stim',mgTask.StimOnset(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1)-mgTask.SRT(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1),'-stop',mgTask.SRT(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1)-mgTask.SRT(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1),'direction','rev');
[vSig, vRise] = klSigLat(spikes(ismember(mgTask.TargetLoc,vLocs) & mgTask.Correct==1,:),'base',[blMean,blStd]);
[mSig, mRise] = klSigLat(spikes(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1,:)-repmat(mgTask.SRT(ismember(mgTask.TargetLoc,mLocs) & mgTask.Correct==1),1,size(spikes,2)),'-r',1,'base',[blMean,blStd]);

if ismember(myType,{'vis','none'}),
    mPoiss = nan; mSig = nan; mRise = nan;
end
if ismember(myType,{'mov','none'}),
    vPoiss = nan; vSig = nan; vRise = nan;
end

% Make latency structure
latencies.vis.sig = vSig;
latencies.vis.rise = vRise;
latencies.vis.poissLat = vPoiss;
latencies.vis.percPoiss = sum(isfinite(poissVisMat(:,1)))./size(poissVisMat,1);

latencies.mov.sig = mSig;
latencies.mov.rise = mRise;
latencies.mov.poissLat = mPoiss;
latencies.mov.percPoiss = sum(isfinite(poissMovMat(:,1)))./size(poissMovMat,1);